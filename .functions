# Git stuff
function git_current_branch() {
  if ! git rev-parse 2> /dev/null; then
    print "$0: not a repository: $PWD" >&2
    return 1
  fi

  local ref="$(git symbolic-ref HEAD 2> /dev/null)"

  if [[ -n "$ref" ]]; then
    print "${ref#refs/heads/}"
    return 0
  else
    return 1
  fi
}

function git_default_branch(){
  git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

function git_checkout_default_branch() {
  local default_branch="$(git_default_branch)"
  git checkout $default_branch
}

function git_pull_origin_default_branch() {
  local default_branch="$(git_default_branch)"
  git pull origin $default_branch
}

function git_checkout_default_branch_and_pull() {
  local default_branch="$(git_default_branch)"
  git checkout $default_branch && git pull
}

function pull_and_merge_default() {
  local default_branch="$(git_default_branch)"
  local current_branch="$(git_current_branch)"
  git checkout $default_branch
  git pull
  git checkout $current_branch
  git merge master
}

function merge_default() {
  local default_branch="$(git_default_branch)"
  git merge $default_branch
}

function publish_current_branch() {
  local current_branch="$(git_current_branch)"
  git push --set-upstream origin $current_branch:$current_branch
}

function pull_origin_current_branch() {
  local current_branch="$(git_current_branch)"
  git pull origin $current_branch
}

function delete_local_merged_branches() {
  local default_branch="$(git_default_branch)"
  git branch --merged | egrep -v "(^\*|$default_branch)" | xargs git branch -d
}

function delete_remote_merged_branches() {
  local default_branch="$(git_default_branch)"
  git fetch origin
  git remote prune origin
  git branch -r --merged origin/$default_branch | awk -F'/' '/^ *origin/{if(!match($0, /(>|$default_branch)/)){print $2}}' | xargs git push origin --delete
}

# get current IP address
function getip() {
  node ~/local-git/dotfiles/scripts/getIp.js
}

# Mac stuff
function mkcd() {
  mkdir -p "$1" && cd "$1";
}

# I hate remembering syntax for copying to clipboard
function copy() {
  pbcopy < $1; echo "$(tput setaf 2)Contents of $(tput setaf 5)${1} $(tput setaf 2)copied to clipboard!"
}

# empty the trash
function dump() {
  node ~/local-git/dotfiles/scripts/emptyTrash.js
}

# fix n notifications
function fixn() {
  sudo /usr/libexec/ApplicationFirewall/socketfilterfw --remove $(which node)
  sudo codesign --force --sign - $(which node)
  sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add $(which node)
}
